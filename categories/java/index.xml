<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on SivaLabs</title>
    <link>https://sivalabs.github.io/categories/java/</link>
    <description>Recent content in Java on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Mar 2020 04:59:17 +0530</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What I Learned in Week-11, 2020</title>
      <link>https://sivalabs.github.io/2020/03/what-i-learned-2020-week-11/</link>
      <pubDate>Sun, 15 Mar 2020 04:59:17 +0530</pubDate>
      
      <guid>https://sivalabs.github.io/2020/03/what-i-learned-2020-week-11/</guid>
      <description>I come across many blog posts from various sources like Twitter, StackOverflow etc and some of them are very helpful. Also, in day to day work I learn few new things, explore some new tools. Usually I keep track of this information using Browser Bookmarks and Pocket.
I thought may be this information could be useful for others too. So, I am going to share it weekly on my blog.</description>
    </item>
    
    <item>
      <title>Spring Cloud Tutorials – Auto Refresh Config Changes using Spring Cloud Bus</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</link>
      <pubDate>Mon, 14 Aug 2017 12:30:43 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</guid>
      <description>Problem In the previous article Introduction to Spring Cloud Config Server we have seen how to use Spring Cloud Config Server.
But, the problem is to reload the config changes in Config Client applications we need to trigger /refresh endpoint manually. This is not practical and viable if you have large number of applications.
Solution Spring Cloud Bus module can be used to link multiple applications with a message broker and we can broadcast configuration changes.</description>
    </item>
    
    <item>
      <title>Spring Cloud Tutorials – Introduction to Spring Cloud Config Server</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</link>
      <pubDate>Mon, 14 Aug 2017 03:35:07 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</guid>
      <description>Problem SpringBoot provides lot of flexibility in externalizing configuration properties via properties or YAML files. We can also configure properties for each environment (dev, qa, prod etc) separately using profile specific configuration files such as application.properties, application-dev.properties, application-prod.properties etc. But once the application is started we can not update the properties at runtime. If we change the properties we need to restart the application to use the updated configuration properties.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-8</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-8/</link>
      <pubDate>Thu, 31 Dec 2015 11:37:10 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-8/</guid>
      <description>In this Iteration#8 we will implement showing the Customer Account and Order History functionality in our ShoppingCart application.
 Customer MyAccount Page  Profile Order History   Once the customer is logged in our system he can click on MyAccount link at the top of the header and view his profile details and order history.
First let us write the Controller handler method in our CustomerController to show myAccount details.</description>
    </item>
    
    <item>
      <title>JCart : Manage Customers</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-customers/</link>
      <pubDate>Thu, 31 Dec 2015 09:34:50 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-customers/</guid>
      <description>For Managing Customers we need a provision to see all the list of customers and view any Customers details.
Let us start with implementing the back-end Customer service.
public interface CustomerRepository extends JpaRepository&amp;lt;Customer, Integer&amp;gt; { Customer findByEmail(String email); @Query(&amp;#34;select o from Order o where o.customer.email=?1&amp;#34;) List&amp;lt;Order&amp;gt; getCustomerOrders(String email); } @Service @Transactional public class CustomerService { @Autowired CustomerRepository customerRepository; public Customer getCustomerByEmail(String email) { return customerRepository.findByEmail(email); } public Customer createCustomer(Customer customer) { return customerRepository.</description>
    </item>
    
    <item>
      <title>JCart : Manage Orders</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-orders/</link>
      <pubDate>Thu, 31 Dec 2015 09:21:17 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-orders/</guid>
      <description>For Managing Orders we need a provision to see all the list of orders and view an order details and updating the order status.
Let us start with implementing the back-end order service.
@Service @Transactional public class OrderService { @Autowired EmailService emailService; @Autowired OrderRepository orderRepository; ... ... public Order getOrder(String orderNumber) { return orderRepository.findByOrderNumber(orderNumber); } public List&amp;lt;Order&amp;gt; getAllOrders() { Sort sort = new Sort(Direction.DESC, &amp;#34;createdOn&amp;#34;); return orderRepository.findAll(sort); } public Order updateOrder(Order order) { Order o = getOrder(order.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-7</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-7/</link>
      <pubDate>Thu, 31 Dec 2015 09:17:15 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-7/</guid>
      <description>In Iteration#6 we have implemented features in ShoppingCart application to enable Customers place orders. In this Iteration#7 we will implement the features in Administration application to view and manage the Customers and Orders.
As part of Iteration#7 we will implement the following usecases:
 Manage Orders  List all Orders View Order details Update Order status  Manage Customers  List all customers View customer details   </description>
    </item>
    
    <item>
      <title>JCart : Billing and Delivery Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-billing-and-delivery-page/</link>
      <pubDate>Thu, 31 Dec 2015 07:40:14 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-billing-and-delivery-page/</guid>
      <description>Once the customer reviewed his cart items details and clicks on Checkout we should display Billing &amp;amp; Delivery page where customer enters delivery address details, payment details etc and place the order.
Let us create a OrderDTO.java as follows:
public class OrderDTO implements Serializable { private static final long serialVersionUID = 1L; @NotEmpty(message=&amp;#34;FirstName is required&amp;#34;) private String firstName; @NotEmpty(message=&amp;#34;LastName is required&amp;#34;) private String lastName; @NotEmpty(message=&amp;#34;EmailId is required&amp;#34;) @Email private String emailId; @NotEmpty(message=&amp;#34;Phone is required&amp;#34;) private String phone; @NotEmpty(message=&amp;#34;Address Line1 is required&amp;#34;) private String addressLine1; private String addressLine2; @NotEmpty(message=&amp;#34;City is required&amp;#34;) private String city; @NotEmpty(message=&amp;#34;State is required&amp;#34;) private String state; @NotEmpty(message=&amp;#34;ZipCode is required&amp;#34;) private String zipCode; @NotEmpty(message=&amp;#34;Country is required&amp;#34;) private String country; @NotEmpty(message=&amp;#34;FirstName is required&amp;#34;) private String billingFirstName; @NotEmpty(message=&amp;#34;LastName is required&amp;#34;) private String billingLastName; @NotEmpty(message=&amp;#34;Address Line1 is required&amp;#34;) private String billingAddressLine1; private String billingAddressLine2; @NotEmpty(message=&amp;#34;City is required&amp;#34;) private String billingCity; @NotEmpty(message=&amp;#34;State is required&amp;#34;) private String billingState; @NotEmpty(message=&amp;#34;ZipCode is required&amp;#34;) private String billingZipCode; @NotEmpty(message=&amp;#34;Country is required&amp;#34;) private String billingCountry; @NotEmpty(message=&amp;#34;Credit Card Number is required&amp;#34;) private String ccNumber; @NotEmpty(message=&amp;#34;CVV is required&amp;#34;) private String cvv; //setters &amp;amp; getters } Create CheckoutController to display the Billing &amp;amp; Delivery page as follows:</description>
    </item>
    
    <item>
      <title>JCart : Customer Registration</title>
      <link>https://sivalabs.github.io/2015/12/jcart-customer-registration/</link>
      <pubDate>Thu, 31 Dec 2015 07:24:01 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-customer-registration/</guid>
      <description>To facilitate new customer registration we will provide a new Registration form where customer provide his details and register with our system.
Let us implement the back-end customer service operations.
public interface CustomerRepository extends JpaRepository&amp;lt;Customer, Integer&amp;gt;{ Customer findByEmail(String email); } @Service @Transactional public class CustomerService { @Autowired CustomerRepository customerRepository; public Customer getCustomerByEmail(String email) { return customerRepository.findByEmail(email); } public Customer createCustomer(Customer customer) { return customerRepository.save(customer); } } @Component public class CustomerValidator implements Validator { @Autowired private CustomerService custmoerService; @Override public boolean supports(Class&amp;lt;?</description>
    </item>
    
    <item>
      <title>JCart : Customer Login</title>
      <link>https://sivalabs.github.io/2015/12/jcart-customer-login/</link>
      <pubDate>Thu, 31 Dec 2015 07:20:06 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-customer-login/</guid>
      <description>So far we have implemented the functionality where customers can browse the categories, add products to cart, view Cart and update/remove items.
But to checkout the cart the customer should login into the system. So if the customer is not yet loggedin we should redirect customer to login page. If customer is already registered with our system he can login or he should be able to register. So, we will start implementing Customer Login/Registration usecases.</description>
    </item>
    
    <item>
      <title>JCart : Iteration -6</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-6/</link>
      <pubDate>Thu, 31 Dec 2015 07:16:40 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-6/</guid>
      <description>In this Iteration-6 we will be implementing the Customer Login/Register and placing the orders.
As per of this we will implement the following usecases:
 Customer Login Customer Registration Billing &amp;amp; Delivery Page  Create Order Order Confirmation Page Send Order Confirmation Email   </description>
    </item>
    
    <item>
      <title>JCart : View Cart</title>
      <link>https://sivalabs.github.io/2015/12/jcart-view-cart/</link>
      <pubDate>Thu, 31 Dec 2015 05:32:11 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-view-cart/</guid>
      <description>In our earlier post we have implemented Add To Cart functionality. In this post we will implement showing the Cart Item details.
In out mainLayout.html header we have ShoppingCart icon showing the cart item count as follows:
&amp;lt;div class=&amp;#34;shopping-item&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;#&amp;#34; th:href=&amp;#34;@{/cart}&amp;#34;&amp;gt;Cart &amp;lt;i class=&amp;#34;fa fa-shopping-cart&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;span id=&amp;#34;cart-item-count&amp;#34; class=&amp;#34;product-count&amp;#34;&amp;gt;(0)&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; When customer clicks on Cart icon we will show the Cart details. Let us implement the &amp;#8220;/cart&amp;#8221; url handler method in CartController as follows:</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Add Item To Cart</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-add-item-to-cart/</link>
      <pubDate>Thu, 31 Dec 2015 05:27:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-add-item-to-cart/</guid>
      <description>In our HomePage/CategoryPage/ProductPage we have a button Add To Cart as follows:
&amp;lt;a class=&amp;#34;add_to_cart_button&amp;#34; data-quantity=&amp;#34;1&amp;#34; data-product_sku=&amp;#34;&amp;#34; data-product_id=&amp;#34;70&amp;#34; rel=&amp;#34;nofollow&amp;#34; href=&amp;#34;#&amp;#34; th:onclick=&amp;#34;&amp;#39;javascript:addItemToCart(\&amp;#39;&amp;#39; + ${product.sku} + &amp;#39;\&amp;#39;);&amp;#39;&amp;#34;&amp;gt; Add to cart &amp;lt;/a&amp;gt; When customer clicks on Add To Cart button it will trigger addItemToCart(sku) JavaScript function passing the product SKU value.
Now create jcart-site/src/main/resources/static/assets/js/app.js and implement addItemToCart(sku) function as follows:
function addItemToCart(sku) { $.ajax ({ url: &amp;#39;/cart/items&amp;#39;, type: &amp;#34;POST&amp;#34;, dataType: &amp;#34;json&amp;#34;, contentType: &amp;#34;application/json&amp;#34;, data : &amp;#39;{&amp;#34;sku&amp;#34;:&amp;#34;&amp;#39;+ sku +&amp;#39;&amp;#34;}&amp;#34;&amp;#39;, complete: function(responseData, status, xhttp){ updateCartItemCount();	} }); }  This function triggers an Ajax call to url &amp;#8216;/cart/items&amp;#8217; using jQuery and if it is successful we are calling another JavaScript function updateCartItemCount().</description>
    </item>
    
    <item>
      <title>JCart : Iteration-5</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-5/</link>
      <pubDate>Thu, 31 Dec 2015 05:19:06 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-5/</guid>
      <description>In Iteration-5 we will be primarily working on Cart related functionality. As part of Iteration-4 we have implemented showing Home page, Category Page, Product Page and Product Search features.
In this Iteration we will implement the following usecases:
 Add To Cart in HomePage/CategoryPage/ProductPage Cart Page
 View Cart Items Updates Quantity Remove Items   </description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Product Search Results</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-search-results/</link>
      <pubDate>Wed, 30 Dec 2015 14:27:57 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-search-results/</guid>
      <description>In our main template we have a Search box to search for products. In this post we will implement the Product Search functionality. When customer search for a product we will search products based on name or SKU or description.
Let us implement the search handler method in ProductController as follows:
@Controller public class ProductController extends JCartSiteBaseController {	@Autowired protected CatalogService catalogService; ... ... @RequestMapping(&amp;#34;/products&amp;#34;) public String searchProducts(@RequestParam(name=&amp;#34;q&amp;#34;, defaultValue=&amp;#34;&amp;#34;) String query, Model model) { List&amp;lt;Product&amp;gt; products = catalogService.</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Product Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-page/</link>
      <pubDate>Wed, 30 Dec 2015 14:25:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-product-page/</guid>
      <description>Customers can click on a product to view more details about the product either in Home Page or in Category Page.
Let us implement Controller method to show Product details as follows:
@Controller public class ProductController extends JCartSiteBaseController {	@Autowired protected CatalogService catalogService; .... .... @RequestMapping(&amp;#34;/products/{sku}&amp;#34;) public String product(@PathVariable String sku, Model model) { Product product = catalogService.getProductBySku(sku); model.addAttribute(&amp;#34;product&amp;#34;, product); return &amp;#34;product&amp;#34;; } } @Service @Transactional public class CatalogService { @Autowired ProductRepository productRepository; .</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Category Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-category-page/</link>
      <pubDate>Wed, 30 Dec 2015 14:23:06 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-category-page/</guid>
      <description>In our Home Page we displayed all the Categories along with few products per each category. When customer clicks on any Category Name we should display Category Page which shows all the products in that Category.
We already have HomeController.category() method to handle the URL /categories/{name}.
So let us create category.html thymeleaf template as follows:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34; xmlns:sec=&amp;#34;http://www.thymeleaf.org/thymeleaf-extras-springsecurity3&amp;#34; layout:decorator=&amp;#34;layout/mainLayout&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Category&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div layout:fragment=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;single-product-area&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;zigzag-bottom&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;row&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;woocommerce-info&amp;#34;&amp;gt; &amp;lt;a href=&amp;#34;&amp;#34; th:href=&amp;#34;@{/}&amp;#34;&amp;gt;Home&amp;lt;/a&amp;gt; / &amp;lt;a href=&amp;#34;&amp;#34; th:href=&amp;#34;@{/categories/{name}(name=${category.</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart Home Page</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-home-page/</link>
      <pubDate>Wed, 30 Dec 2015 14:20:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-home-page/</guid>
      <description>In our Home page we will show all the categories along with few of the products in each Category.
Let us update HomeController with two methods to show all the categories and the selected category products.
@Controller public class HomeController extends JCartSiteBaseController {	@Autowired protected CatalogService catalogService; @RequestMapping(&amp;#34;/home&amp;#34;) public String home(Model model) { List&amp;lt;Category&amp;gt; previewCategories = new ArrayList&amp;lt;&amp;gt;(); List&amp;lt;Category&amp;gt; categories = catalogService.getAllCategories(); for (Category category : categories) { Set&amp;lt;Product&amp;gt; products = category.</description>
    </item>
    
    <item>
      <title>JCart : ShoppingCart UI Layout Setup</title>
      <link>https://sivalabs.github.io/2015/12/jcart-shoppingcart-ui-layout-setup/</link>
      <pubDate>Wed, 30 Dec 2015 14:17:41 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-shoppingcart-ui-layout-setup/</guid>
      <description>In this post we will setup the layout for our ShoppingCart UI using Thymeleaf templates.
Download the ustore theme zip file from https://www.freshdesignweb.com/ustora/ and copy the following directories/files into jcart-site/src/main/resources/static/assets folder.
 css fonts img js style.css  Create Site layout thymeleaf template jcart-site/src/main/resources/templates/layout/mainLayout.html as follows:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34; xmlns:sec=&amp;#34;http://www.thymeleaf.org/thymeleaf-extras-springsecurity3&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;/&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;/&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1&amp;#34;/&amp;gt; &amp;lt;title layout:title-pattern=&amp;#34;$DECORATOR_TITLE - $CONTENT_TITLE&amp;#34;&amp;gt;QuilCart&amp;lt;/title&amp;gt; &amp;lt;!-- Google Fonts --&amp;gt; &amp;lt;link href=&amp;#39;https://fonts.</description>
    </item>
    
    <item>
      <title>JCart : Initial code setup for ShoppingCart</title>
      <link>https://sivalabs.github.io/2015/12/jcart-initial-code-setup-for-shoppingcart/</link>
      <pubDate>Wed, 30 Dec 2015 14:15:54 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-initial-code-setup-for-shoppingcart/</guid>
      <description>First we will start with setting up the initial code using SpringBoot. We have already discussed in JCart: Initial Code SetUp article about creating a maven module jcart-site which will be our ShoppingCart application. In that article we have shown what springboot dependencies to add as well.
Just to recap we will be using SpringBoot, SpringMVC, Thymeleaf, JPA for our ShoppingCart application.
jcart-site/pom.xml
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;com.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-4</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-4/</link>
      <pubDate>Wed, 30 Dec 2015 14:14:40 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-4/</guid>
      <description>In this Iteration-4 we will start building the consumer facing ShoppingCart website.
 Initial code setup for ShoppingCart webapp
 Configuring HTTPS/SSL/TLS  ShoppingCart UI Layout setup Home Page Category Page Product Page Product Search Results  </description>
    </item>
    
    <item>
      <title>JCart Iteration-3 : Manage Categories and Products</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-3-manage-categories-and-products/</link>
      <pubDate>Sun, 20 Dec 2015 05:58:44 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-3-manage-categories-and-products/</guid>
      <description>In this iteration we will start working on the key requirement of our JCart administration application, ie managing categories and products.
We will create various categories like Birds, Flowers, Vehicles etc. While creating products we will assign it to one of the category.
Managing Categories and Products also looks similar to Manage Roles and Users. But there are few new things we will learn like FileUploading etc.
Create Spring Data JPA Repositories for Category and Product public interface CategoryRepository extends JpaRepository&amp;lt;Category, Integer&amp;gt; { Category getByName(String name); } public interface ProductRepository extends JpaRepository&amp;lt;Product, Integer&amp;gt; { Product findByName(String name); Product findBySku(String sku); @Query(&amp;#34;select p from Product p where p.</description>
    </item>
    
    <item>
      <title>JCart: Manage Users</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-users/</link>
      <pubDate>Sat, 19 Dec 2015 06:20:55 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-users/</guid>
      <description>In our previous post JCart: Manage Roles we have seen how to list all roles, create new roles and update them.
Implementation of Manage Users also follows the same approach and very similar to the Implementation of Manage Roles. So I am not posting details of the implementation here again. Instead you can simply refer the code on JCart github repository https://github.com/sivaprasadreddy/jcart.
If you have any questions regarding the implementation of Manage Users please post a comment.</description>
    </item>
    
    <item>
      <title>JCart: Manage Roles</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-roles/</link>
      <pubDate>Sat, 19 Dec 2015 03:16:38 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-roles/</guid>
      <description>In our previous post Manage Privileges – List all privileges we have implemented the functionality to show list of permissions. In this post we will implement Role management such as listing all Roles, creating new Role, editing Role permissions etc.
Basically a Role is nothing a but group of Permissions assigned so that giving access to a set of action to user will become easy by assigning Roles.
In this post we are going to see lot of code snippets, so I would suggest to clone the repo https://github.</description>
    </item>
    
    <item>
      <title>JCart: Manage Privileges</title>
      <link>https://sivalabs.github.io/2015/12/jcart-manage-privileges/</link>
      <pubDate>Fri, 18 Dec 2015 14:32:52 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-manage-privileges/</guid>
      <description>This is the simplest usecase of entire JCart admin application :-). We need to show list of permissions configured in our system.
In our system each permission is more like access to a particular screen. For example, If a user has MANAGE_CATEGORIES permission then only he can access &amp;#8220;Categories&amp;#8221; screen. So these set of permission are something like implemented features set, hence we don&amp;#8217;t need any provision to add/update/delete permissions dynamically.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-2</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-2/</link>
      <pubDate>Fri, 18 Dec 2015 13:38:10 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-2/</guid>
      <description>Now we have completed Iteration-1 tasks. Iteration-1 includes so many tasks to establish the foundation like configuring Spring Security, Thymeleaf settings, UI layout setup etc. I hope from now on we can put more focus on actual tasks implementation rather than infrastructure setup.
Though majority of the infrastructure setup is in place now, we will implement Role Based Access Control (RBAC) security using User-Role-Permission model before jumping on to Category/Product management.</description>
    </item>
    
    <item>
      <title>Setting up Jenkins/SonarQube</title>
      <link>https://sivalabs.github.io/2015/12/setting-up-jenkinssonarqube/</link>
      <pubDate>Wed, 16 Dec 2015 14:42:29 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/setting-up-jenkinssonarqube/</guid>
      <description>In this post we will setup SonarQube and Jenkins to perform code quality check and continuous integration.
&amp;nbsp;
Install and configure SonarQube There are many code quality checking tools like PMD, Firebug but SonarQube brings them all under one roof and gives better view of code quality.
Let us install and configure SonarQube for our JCart application.
Download SonarQube from http://www.sonarqube.org/downloads/.
Extract it run sonarqube-5.2/bin/windows-x86-64/StartSonar.bat.
By default SonarQube uses in-memory H2 database to store all the metrics.</description>
    </item>
    
    <item>
      <title>JCart: Configuring HTTPS SSL/TLS</title>
      <link>https://sivalabs.github.io/2015/12/jcart-configuring-https-ssltls/</link>
      <pubDate>Mon, 07 Dec 2015 13:17:45 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-configuring-https-ssltls/</guid>
      <description>So far our JCart application is running on Tomcat default port 8080 using HTTP protocol. In this article we will configure to use HTTPS by using Self Signed Certificate. For real projects you would have to buy certificate from a Trusted Authority.
I would like to run ShoppingCart site on https://host:8443 and if anyone tries to access it from http://host:8080 it should redirect to https://host:8443.
Similarly I would like to run Administration site on https://host:9443 and if anyone tries to access it from http://host:9090 it should redirect to https://host:9443.</description>
    </item>
    
    <item>
      <title>JCart: Admin Reset Password</title>
      <link>https://sivalabs.github.io/2015/12/jcart-admin-reset-password/</link>
      <pubDate>Sun, 06 Dec 2015 10:41:22 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-admin-reset-password/</guid>
      <description>Once the Admin User clicked on Password Reset Link that we sent via Email, we will validate the Token and if is valid then we will show a form to enter New Password, otherwise shows an error.
@Controller public class UserAuthController extends JCartAdminBaseController { ... @RequestMapping(value=&amp;#34;/resetPwd&amp;#34;, method=RequestMethod.GET) public String resetPwd(HttpServletRequest request, Model model, RedirectAttributes redirectAttributes) { String email = request.getParameter(&amp;#34;email&amp;#34;); String token = request.getParameter(&amp;#34;token&amp;#34;); boolean valid = securityService.verifyPasswordResetToken(email, token); if(valid){ model.</description>
    </item>
    
    <item>
      <title>JCart: Admin Forgot Password</title>
      <link>https://sivalabs.github.io/2015/12/jcart-admin-forgot-password/</link>
      <pubDate>Sun, 06 Dec 2015 10:34:33 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-admin-forgot-password/</guid>
      <description>We will provide a link to Forgot Password in Login page and create jcart-admin/src/main/resources/templates/public/forgotPwd.html template as follows:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html xmlns=&amp;#34;http://www.w3.org/1999/xhtml&amp;#34; xmlns:th=&amp;#34;http://www.thymeleaf.org&amp;#34; layout:decorator=&amp;#34;layout/guestLayout&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Forgot Password&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body &amp;gt; &amp;lt;div layout:fragment=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;form action=&amp;#34;forgotPwd&amp;#34; th:action=&amp;#34;@{/forgotPwd}&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;email&amp;#34; class=&amp;#34;form-control&amp;#34; name=&amp;#34;email&amp;#34; placeholder=&amp;#34;Email&amp;#34;/&amp;gt; &amp;lt;button type=&amp;#34;submit&amp;#34; class=&amp;#34;btn btn-primary btn-block btn-flat&amp;#34; th:text=&amp;#34;#{label.submit}&amp;#34;&amp;gt;Submit&amp;lt;/button&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; When Admin user enters the email address and submit we will generate a token, store it in our DB and generates a Reset Password Link and send it to their email.</description>
    </item>
    
    <item>
      <title>JCart: Email Service SetUp</title>
      <link>https://sivalabs.github.io/2015/12/jcart-email-service-setup/</link>
      <pubDate>Sun, 06 Dec 2015 10:23:36 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-email-service-setup/</guid>
      <description>We are going to implement Admin User Forgot Password functionality where we need to send the Password Reset link to User email address. So let us look at how to configure Email server and send emails.
Spring provides support for sending Emails using JavaMailSender. SpringBoot makes it even easier by providing a starter for emailing support.
As we need Emailing feature in both Admin and ShoppingCart modules, we will implement the emailing functionality in jcart-core module.</description>
    </item>
    
    <item>
      <title>JCart: Configuring Spring Security</title>
      <link>https://sivalabs.github.io/2015/12/jcart-configuring-spring-security/</link>
      <pubDate>Tue, 01 Dec 2015 05:27:15 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-configuring-spring-security/</guid>
      <description>Our JCart Administration site should only be accessible to authorized users only. So, we are going to use SpringSecurity to define the security constraints.
Let us add the following spring-security dependencies to jcart-admin/pom.xml.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.thymeleaf.extras&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;thymeleaf-extras-springsecurity4&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; If we have predefined set of Roles then we can specify the URL patterns and its required Roles something like this:
http .authorizeRequests() .antMatchers(&amp;#34;/login&amp;#34;,&amp;#34;/login/form**&amp;#34;,&amp;#34;/register&amp;#34;,&amp;#34;/logout&amp;#34;).permitAll() .antMatchers(&amp;#34;/admin&amp;#34;,&amp;#34;/admin/**&amp;#34;).hasRole(&amp;#34;ADMIN&amp;#34;) .anyRequest().authenticated() .and() But we need provision to dynamically create new roles as well, hence we can&amp;#8217;t statically define constraints using role names.</description>
    </item>
    
    <item>
      <title>JCart: Admin UI Layout SetUp</title>
      <link>https://sivalabs.github.io/2015/12/jcart-admin-ui-layout-setup/</link>
      <pubDate>Tue, 01 Dec 2015 04:38:56 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-admin-ui-layout-setup/</guid>
      <description>As I am not really a good UI designer I searched for a free good looking UI website Admin templates and I found this fantastic template https://almsaeedstudio.com/preview. We will be using this template for our Administration web application.
We are going to use Thymeleaf templates for our View layer. Thymeleaf offers facelets style templating mechanism. Basically we need 2 layout templates, one for unauthorized views like Login/ForgotPassword etc and another for authorized users.</description>
    </item>
    
    <item>
      <title>JCart: Create JPA Entities</title>
      <link>https://sivalabs.github.io/2015/12/jcart-create-jpa-entities/</link>
      <pubDate>Tue, 01 Dec 2015 04:26:41 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-create-jpa-entities/</guid>
      <description>We are going to create the JPA Entities for the database tables we designed.
@Entity @Table(name=&amp;#34;users&amp;#34;) public class User { @Id @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; @Column(nullable=false) @NotEmpty() private String name; @Column(nullable=false, unique=true) @NotEmpty @Email(message=&amp;#34;{errors.invalid_email}&amp;#34;) private String email; @Column(nullable=false) @NotEmpty @Size(min=4) private String password; private String passwordResetToken; @ManyToMany(cascade=CascadeType.MERGE) @JoinTable( name=&amp;#34;user_role&amp;#34;, joinColumns={@JoinColumn(name=&amp;#34;USER_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}, inverseJoinColumns={@JoinColumn(name=&amp;#34;ROLE_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}) private List&amp;lt;Role&amp;gt; roles; //setters &amp;amp; getters } @Entity @Table(name=&amp;#34;roles&amp;#34;) public class Role { @Id @GeneratedValue(strategy=GenerationType.AUTO) private Integer id; @Column(nullable=false, unique=true) @NotEmpty private String name; @Column(length=1024) private String description; @ManyToMany(mappedBy=&amp;#34;roles&amp;#34;) private List&amp;lt;User&amp;gt; users; @ManyToMany @JoinTable( name=&amp;#34;role_permission&amp;#34;, joinColumns={@JoinColumn(name=&amp;#34;ROLE_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}, inverseJoinColumns={@JoinColumn(name=&amp;#34;PERM_ID&amp;#34;, referencedColumnName=&amp;#34;ID&amp;#34;)}) private List&amp;lt;Permission&amp;gt; permissions; //setters &amp;amp; getters } @Entity @Table(name=&amp;#34;permissions&amp;#34;) public class Permission { @Id @GeneratedValue(strategy=GenerationType.</description>
    </item>
    
    <item>
      <title>JCart: Domain Modelling and Database Designing</title>
      <link>https://sivalabs.github.io/2015/12/jcart-domain-modelling-and-database-designing/</link>
      <pubDate>Tue, 01 Dec 2015 04:22:19 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-domain-modelling-and-database-designing/</guid>
      <description>While developing database driven applications using some ORM framework, some people prefer Object first approach and others follow DB first approach. I prefer DB first approach.
So, let us start listing down all the domain entities in our JCart application domain.
 Product Category Customer Order OrderItem Cart Address User Role Permission  Let us create the database tables as follows:
Though we identified Cart as a domain entity, we are not creating the table for holding the Cart details.</description>
    </item>
    
    <item>
      <title>JCart: Initial Code SetUp</title>
      <link>https://sivalabs.github.io/2015/12/jcart-initial-code-setup/</link>
      <pubDate>Tue, 01 Dec 2015 04:14:09 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-initial-code-setup/</guid>
      <description>Let us create a root pom type maven project with 3 sub-modules jcart-core, jcart-admin and jcart-site.
jcart-core module will contain all the core logic excluding web related stuff.
jcart-admin module will contain all the administration related web functionality like Controllers, Security, Validators etc.
jcart-site module will contain all the shoppingcart related web functionality like Controllers, Security, Validators etc.
All these modules use SpringBoot, but as of now STS/IntellijIdea are not providing option to create multi-module SpringBoot application, we will be creating Maven modules and then configure SpringBoot dependencies manually.</description>
    </item>
    
    <item>
      <title>JCart : Iteration-1</title>
      <link>https://sivalabs.github.io/2015/12/jcart-iteration-1/</link>
      <pubDate>Tue, 01 Dec 2015 04:10:08 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/12/jcart-iteration-1/</guid>
      <description>Now that we have completed the most difficult part (writing Introduction to technical article series is much harder than you think!!), so let&amp;#8217;s start the fun part. Coding!!!
 Note: It is going to be a fast paced tutorial. Obviously we can&amp;rsquo;t cover every little bit of all the technologies used in our application. So I would suggest to explore more on individual technologies like Spring, Thymeleaf on your own.</description>
    </item>
    
    <item>
      <title>Setting up the Development Environment for JCart</title>
      <link>https://sivalabs.github.io/2015/11/setting-up-the-development-environment-for-jcart/</link>
      <pubDate>Tue, 24 Nov 2015 04:34:03 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/setting-up-the-development-environment-for-jcart/</guid>
      <description>For our JCart application development we will be using the following Softwares/Tools.
  JDK 8 SpringSource Tool Suite (STS)  MySQL Git  Maven  Jenkins  SonarQube  Apache/Nginx WebServer  I am not going to explain how to install JDK or MySQL because there are plenty of articles you can find on internet.
If you are using Ubuntu based Linux Operating System then you can refer my article My Development Environment Setup on Linux to setup Java development tool chain.</description>
    </item>
    
    <item>
      <title>JCart Release Planning</title>
      <link>https://sivalabs.github.io/2015/11/jcart-release-planning/</link>
      <pubDate>Tue, 24 Nov 2015 04:26:20 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/jcart-release-planning/</guid>
      <description>In our previous article JCart Requirements Analysis we have listed out all the requirements that we need to implement for JCart application. Now we need to come up with an implementation and release plan. As we are following iteration model, we will plan for N iterations where in each iteration we will implement some usecases.
After listing out all the implementation tasks and based on the task dependencies, we came up with the following Iteration plan.</description>
    </item>
    
    <item>
      <title>JCart Requirements Analysis</title>
      <link>https://sivalabs.github.io/2015/11/jcart-requirements-analysis/</link>
      <pubDate>Sat, 21 Nov 2015 11:29:54 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/jcart-requirements-analysis/</guid>
      <description>For building our JCart e-commerce application we will develop two web applications, one for ShoppingCart and another one for Administration. Let us explore the requirements of both ShoppingCart and Administration websites in detail.
ShoppingCart Site Requirements Home Page: This page shows list of categories and few products in each category. From this screen customers can click on any Category name to see all the products in that particular category or can add a product to cart.</description>
    </item>
    
    <item>
      <title>Introducing the application JCart</title>
      <link>https://sivalabs.github.io/2015/11/introducing-the-application-jcart/</link>
      <pubDate>Sat, 21 Nov 2015 02:28:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/introducing-the-application-jcart/</guid>
      <description>As I promised in my article Developing a simple e-commerce application from scratch to production using SpringBoot , I am starting first post by introducing the application JCart that we are going to build.
One of my friend makes quilling toys and she sell them by advertising on Facebook or through word of mouth. Now she is getting more and more customers and she wants to expand her business by going online.</description>
    </item>
    
    <item>
      <title>Developing a simple e-commerce application from scratch to production using SpringBoot</title>
      <link>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</link>
      <pubDate>Fri, 20 Nov 2015 14:18:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</guid>
      <description>We can find plenty of information on any technical topic, be it Java, .NET, Python or any frameworks like Spring, Hibernate, CDI, JSF etc. You can find hundreds of well written blogs on many of these topics. For example, you can find lot of tutorials on how to use SpringBoot or how to use various mappings in JPA/Hibernate or how to do form validations in JSF etc. Also, there are plenty of books published by well established publishers on most of the technologies.</description>
    </item>
    
    <item>
      <title>My Life as a Software Developer in India</title>
      <link>https://sivalabs.github.io/2015/07/my-life-as-software-developer-in-india/</link>
      <pubDate>Mon, 06 Jul 2015 16:17:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/07/my-life-as-software-developer-in-india/</guid>
      <description>I am Siva, working as a Software Developer in Hyderabad, India. Working as a Software Developer is very exciting as you see new things coming in everyday. If there are no new things at least we put a new fancy name to some old concept and celebrate (#microservices) :-). But in my opinion working as a Software Developer in India is little bit different and hard too. Few things are good, and few things are bad.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial : Part4 – Spring Integration</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part4-spring-integration/</link>
      <pubDate>Wed, 24 Oct 2012 00:40:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part4-spring-integration/</guid>
      <description>MyBatis Tutorial: Part1 &amp;#8211; CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 &amp;#8211; Mapping Relationships
MyBatis Tutorial : Part4 &amp;#8211; Spring Integration
MyBatis-Spring is a sub-project of MyBatis and provides Spring integration support which drastically simplifies the MyBatis usage. For those who are familiar with Spring&amp;#8217;s way of Dependency Injection process, using MyBatis-Spring is a very simple.
First let us see the process of using MyBatis without Spring.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part 3 – Mapping Relationships</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-3-mapping-relationships/</link>
      <pubDate>Sun, 21 Oct 2012 14:07:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-3-mapping-relationships/</guid>
      <description>In this post let us see how to use MyBatis ResultMap configuration to map relationships.
MyBatis Tutorial: Part1 &amp;#8211; CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 &amp;#8211; Mapping Relationships
MyBatis Tutorial : Part4 &amp;#8211; Spring Integration
To illustrate we are considering the following sample domain model:
There will be Users and each User may have a Blog and each Blog can contain zero or more posts.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part-2: CRUD operations Using Annotations</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-2-crud-operations-using-annotations/</link>
      <pubDate>Sun, 21 Oct 2012 11:49:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part-2-crud-operations-using-annotations/</guid>
      <description>In this post I will explain how to perform CRUD operations using MyBatis Annotation support without need of Queries configuration in XML mapper files.
MyBatis Tutorial: Part1 &amp;#8211; CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 &amp;#8211; Mapping Relationships
MyBatis Tutorial : Part4 &amp;#8211; Spring Integration
Step#1: Create a table BLOG and a java domain Object Blog.
CREATE TABLE blog ( blog_id int(10) unsigned NOT NULL auto_increment, blog_name varchar(45) NOT NULL, created_on datetime NOT NULL, PRIMARY KEY (blog_id) ) ENGINE=InnoDB DEFAULT CHARSET=latin1; package com.</description>
    </item>
    
    <item>
      <title>MyBatis Tutorial: Part1 – CRUD Operations</title>
      <link>https://sivalabs.github.io/2012/10/mybatis-tutorial-part1-crud-operations/</link>
      <pubDate>Sun, 21 Oct 2012 11:10:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/mybatis-tutorial-part1-crud-operations/</guid>
      <description>MyBatis is an SQL Mapper tool which greatly simplifies the database programing when compared to using JDBC directly.
MyBatis Tutorial: Part1 &amp;#8211; CRUD Operations
MyBatis Tutorial: Part-2: CRUD operations Using Annotations
MyBatis Tutorial: Part 3 &amp;#8211; Mapping Relationships
MyBatis Tutorial : Part4 &amp;#8211; Spring Integration
Step1: Create a Maven project and configure MyBatis dependencies.
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;com.sivalabs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-demo&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; &amp;lt;name&amp;gt;mybatis-demo&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.apache.org&amp;lt;/url&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>10 things to become an outstanding Java developer</title>
      <link>https://sivalabs.github.io/2011/01/10-things-to-become-outstanding-java/</link>
      <pubDate>Wed, 26 Jan 2011 07:11:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2011/01/10-things-to-become-outstanding-java/</guid>
      <description>If you are a java developer and passionate about technology, you can follow the below things which makes you an outstanding Java developer.
1. Have strong foundation and understanding on OO Principles For a java developer having strong understanding on Object Oriented Programming is a must. Without having a strong foundation on OOPS, one can&amp;#8217;t realize the beauty of an Object Oriented Programming language like Java. If you don&amp;#8217;t have good idea on what OOPS is, eventhough you are using OOP language you may be still coding in procedural way.</description>
    </item>
    
    <item>
      <title>Welcome note</title>
      <link>https://sivalabs.github.io/2008/12/welcome-note/</link>
      <pubDate>Sun, 21 Dec 2008 08:05:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2008/12/welcome-note/</guid>
      <description>Hi All,
Welcome folks. This is a blog where in you can find tutorials on various Java and JavaEE technologies and can have discussions regarding technical problems and application development related issues.</description>
    </item>
    
  </channel>
</rss>