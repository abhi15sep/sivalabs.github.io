<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on SivaLabs</title>
    <link>https://sivalabs.github.io/categories/spring/</link>
    <description>Recent content in Spring on SivaLabs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 18 Oct 2017 02:50:23 +0000</lastBuildDate>
    
	<atom:link href="https://sivalabs.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Select ALL starters on Spring Initializer (http://start.spring.io)</title>
      <link>https://sivalabs.github.io/2017/10/select-all-starters-on-spring-initializer-httpstart-spring-io/</link>
      <pubDate>Wed, 18 Oct 2017 02:50:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/10/select-all-starters-on-spring-initializer-httpstart-spring-io/</guid>
      <description>If you are working on Spring Boot then you most probably aware of Spring Initializer (http://start.spring.io) which is an online spring boot application generator. You can select the starters that you want to use and then generate the application.
If you notice that there is no SELECT ALL option to select all the starters. Who would do that insane thing of selecting all the starters for an application??!!???
But, i would like to have the SELECT ALL option for one single reason:</description>
    </item>
    
    <item>
      <title>Spring Cloud Tutorials – Auto Refresh Config Changes using Spring Cloud Bus</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</link>
      <pubDate>Mon, 14 Aug 2017 12:30:43 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-auto-refresh-config-changes-using-spring-cloud-bus/</guid>
      <description>Problem In the previous article Introduction to Spring Cloud Config Server we have seen how to use Spring Cloud Config Server.
But, the problem is to reload the config changes in Config Client applications we need to trigger /refresh endpoint manually. This is not practical and viable if you have large number of applications.
Solution Spring Cloud Bus module can be used to link multiple applications with a message broker and we can broadcast configuration changes.</description>
    </item>
    
    <item>
      <title>Spring Cloud Tutorials – Introduction to Spring Cloud Config Server</title>
      <link>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</link>
      <pubDate>Mon, 14 Aug 2017 03:35:07 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2017/08/spring-cloud-tutorials-introduction-to-spring-cloud-config-server/</guid>
      <description>Problem SpringBoot provides lot of flexibility in externalizing configuration properties via properties or YAML files. We can also configure properties for each environment (dev, qa, prod etc) separately using profile specific configuration files such as application.properties, application-dev.properties, application-prod.properties etc. But once the application is started we can not update the properties at runtime. If we change the properties we need to restart the application to use the updated configuration properties.</description>
    </item>
    
    <item>
      <title>Getting Started with SpringBoot in Intellij IDEA Community Edition</title>
      <link>https://sivalabs.github.io/2016/09/getting-started-springboot-intellij-idea-community-edition/</link>
      <pubDate>Wed, 07 Sep 2016 09:53:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/09/getting-started-springboot-intellij-idea-community-edition/</guid>
      <description>We can use Intellij IDEA Community Edition for working with SpringBoot applications as we don&amp;#8217;t need support for configuring servers like Tomcat, Wildlfy etc and can simply run the applications by running main() method.
However, there is no provision in Intellij IDEA Community Edition to create SpringBoot application directly, the way it supports in Ultimate Edition.
We can go to http://start.spring.io/ and generate the project and then import into our IDE.</description>
    </item>
    
    <item>
      <title>Update on SpringBoot : Learn By Example book</title>
      <link>https://sivalabs.github.io/2016/07/update-springboot-learn-example-book/</link>
      <pubDate>Sat, 30 Jul 2016 02:53:50 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/07/update-springboot-learn-example-book/</guid>
      <description>I would like to let you know that I have updated/added the following sections to my SpringBoot : Learn By Example book.
Additions to existing chapters:  Working with Multiple Databases Exposing JPA entities with bi-directional references through RESTful services  In some of our applications we need to work with multiple databases. For example, we may have a primary database and a reporting database where most the application uses primary database and the application reports will be generated out of reporting database data.</description>
    </item>
    
    <item>
      <title>My New Book SpringBoot : Learn By Example Published Today</title>
      <link>https://sivalabs.github.io/2016/07/my-new-book-springboot-learn-by-example/</link>
      <pubDate>Wed, 20 Jul 2016 06:05:31 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/07/my-new-book-springboot-learn-by-example/</guid>
      <description>I am happy to announce that my new book SpringBoot : Learn By Example got published today on Leanpub.
SpringBoot : Learn By Example  &amp;nbsp;
  What is SpringBoot?
Spring is one of the most popular Java frameworks out there to build web and enterprise application.
Spring supports variety of configuration approaches (XML, Annotations, JavaConfig etc) and properly configuring Spring applications become a bit tedious and repetitive process. To avoid these problems Spring team introduced SpringBoot to address the complexity of configuring Spring application.</description>
    </item>
    
    <item>
      <title>My Review of Sanjay Patel’s Spring Course</title>
      <link>https://sivalabs.github.io/2016/06/my-review-of-sanjay-patels-spring-course/</link>
      <pubDate>Fri, 03 Jun 2016 01:18:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/06/my-review-of-sanjay-patels-spring-course/</guid>
      <description>Spring is the most popular Java framework for building web and enterprise applications. There are plenty of official documentation, books, and Training Courses available for Spring framework on web.
I got an opportunity to review Sanjay Patel&amp;#8216;s Spring Course Material which is divided into 3 modules.
http://www.naturalprogrammer.com/spring-tutorial/
The total course is divided into 3 modules covering various aspects of web application development using Spring/SpringBoot framework.
 Module I : Spring Framework 4 And Dependency Injection For Beginners Module II : Spring Framework for the Real World Module III : Spring Framework REST API Development  Module I: Spring Framework 4 and Dependency Injection For Beginners</description>
    </item>
    
    <item>
      <title>Creating Custom SpringBoot Starter for Twitter4j</title>
      <link>https://sivalabs.github.io/2016/04/creating-custom-springboot-starter-for/</link>
      <pubDate>Fri, 08 Apr 2016 06:57:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/04/creating-custom-springboot-starter-for/</guid>
      <description>SpringBoot provides lot of starter modules to get up and running quickly. SpringBoot’s auto-configure mechanism takes care of configuring SpringBeans on our behalf based on various criteria.
In addition to the springboot starters that comes out-of-the-box provided by Core Spring Team, we can also create our own starter modules.
In this post we will look into how to create a custom SpringBoot starter. To demonstrate it we are going to create twitter4j-spring-boot-starter which will auto-configure Twitter4J beans.</description>
    </item>
    
    <item>
      <title>SpringBoot : Working with JOOQ</title>
      <link>https://sivalabs.github.io/2016/03/springboot-working-with-jooq/</link>
      <pubDate>Tue, 15 Mar 2016 07:13:21 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/springboot-working-with-jooq/</guid>
      <description>In my previous article SpringBoot : Working with MyBatis we have learned how to use SpringBoot MyBatis Starter to quickly get up and running with Spring and MyBatis. In this article we are going to learn about how to use SpringBoot JOOQ Starter.
JOOQ (JOOQ Object Oriented Querying) is a persistence framework which embraces SQL.
JOOQ provides the following features:
 Building Typesafe SQL using DSL API&amp;nbsp; Typesafe database object referencing using Code Generation&amp;nbsp; Easy to use API for Querying and Data fetching&amp;nbsp; SQL logging and debugging</description>
    </item>
    
    <item>
      <title>SpringBoot : Working with MyBatis</title>
      <link>https://sivalabs.github.io/2016/03/springboot-working-with-mybatis/</link>
      <pubDate>Mon, 14 Mar 2016 07:10:42 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/springboot-working-with-mybatis/</guid>
      <description>MyBatis is a SQL Mapping framework with support for custom SQL, stored procedures and advanced mappings.
SpringBoot doesn’t provide official support for MyBatis integration, but MyBatis community built a SpringBoot starter for MyBatis.&amp;nbsp;  You can read about the SpringBoot MyBatis Starter release announcement at http://blog.mybatis.org/2015/11/mybatis-spring-boot-released.html and you can explore the source code on GitHub https://github.com/mybatis/mybatis-spring-boot.
Create a SpringBoot Maven project and add the following MyBatis Starter dependency. &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>SpringBoot : Working with JdbcTemplate</title>
      <link>https://sivalabs.github.io/2016/03/springboot-working-with-jdbctemplate/</link>
      <pubDate>Mon, 14 Mar 2016 07:08:22 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/springboot-working-with-jdbctemplate/</guid>
      <description>Spring provides a nice abstraction on top of JDBC API using JdbcTemplate and also provides great transaction management capabilities using annotation based approach.
First let’s take a quick look at how we generally use Spring’s JdbcTemplate (without SpringBoot) by registering DataSource, TransactionManager and JdbcTemplate beans and optionally we can register DataSourceInitializer bean to initialize our database.
@Configuration @ComponentScan @EnableTransactionManagement @PropertySource(value = { &amp;#34;classpath:application.properties&amp;#34; }) public class AppConfig { @Autowired private Environment env; @Value(&amp;#34;${init-db:false}&amp;#34;) private String initDatabase; @Bean public static PropertySourcesPlaceholderConfigurer placeHolderConfigurer() { return new PropertySourcesPlaceholderConfigurer(); } @Bean public JdbcTemplate jdbcTemplate(DataSource dataSource) { return new JdbcTemplate(dataSource); } @Bean public PlatformTransactionManager transactionManager(DataSource dataSource) { return new DataSourceTransactionManager(dataSource); } @Bean public DataSource dataSource() { BasicDataSource dataSource = new BasicDataSource(); dataSource.</description>
    </item>
    
    <item>
      <title>How SpringBoot AutoConfiguration magic works?</title>
      <link>https://sivalabs.github.io/2016/03/how-springboot-autoconfiguration-magic/</link>
      <pubDate>Sun, 13 Mar 2016 07:04:56 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/how-springboot-autoconfiguration-magic/</guid>
      <description>In my previous post Why SpringBoot? we have looked at how to create a SpringBoot application. But you may or may not understand what is going on behind the scenes. You may want to understand the magic behind the SpringBoot’s AutoConfiguration.
But before that you should know about Spring’s @Conditional feature based on which all the SpringBoot’s AutoConfiguration magic depends.
Exploring the power of @Conditional While developing Spring based applications we may come across of a need to register beans conditionally.</description>
    </item>
    
    <item>
      <title>Why SpringBoot?</title>
      <link>https://sivalabs.github.io/2016/03/why-springboot/</link>
      <pubDate>Sun, 13 Mar 2016 07:02:10 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/03/why-springboot/</guid>
      <description>Spring is a very popular Java based framework for building web and enterprise applications. Unlike many other frameworks which focuses on only one area, Spring framework provides a wide verity of features addressing the modern business needs via its portfolio projects.
Spring framework provides flexibility to configure the beans in multiple ways such as XML, Annotations and JavaConfig. With the number of features increased the complexity also gets increased and configuring Spring applications becomes tedious and error-prone.</description>
    </item>
    
    <item>
      <title>Retrying Method Execution using Spring AOP</title>
      <link>https://sivalabs.github.io/2016/01/retrying-method-execution-using-spring-aop/</link>
      <pubDate>Tue, 05 Jan 2016 15:40:36 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2016/01/retrying-method-execution-using-spring-aop/</guid>
      <description>One of my blog follower sends an email asking me to show an example of &amp;#8220;RealWorld Usage of Spring AOP&amp;#8221;. He mentioned that in most of the examples the usage of Spring AOP is demonstrated for logging method entry/exit or Transaction management or Security checks. He wanted to know how Spring AOP is being used in &amp;#8220;Real Project for Real Problems&amp;#8221;.
So I would like to show how I have used Spring AOP for one of my project to handle a real problem.</description>
    </item>
    
    <item>
      <title>Selecting The Technology Stack for JCart</title>
      <link>https://sivalabs.github.io/2015/11/selecting-the-technology-stack-for-jcart/</link>
      <pubDate>Sun, 22 Nov 2015 05:17:20 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/selecting-the-technology-stack-for-jcart/</guid>
      <description>Selecting the right technology stack is very crucial and plays an important role in project success. Many of the architects (unknowingly??!!) try to make complex designs by trying to use all kinds of latest and greatest stuff. On the other hand some architects try to be in their comfort zone by limiting their technology stack to the technologies with which they are comfortable. Both approaches are dangerous. One should understand the business needs and pick the technologies that are necessary for project.</description>
    </item>
    
    <item>
      <title>Introducing the application JCart</title>
      <link>https://sivalabs.github.io/2015/11/introducing-the-application-jcart/</link>
      <pubDate>Sat, 21 Nov 2015 02:28:23 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/introducing-the-application-jcart/</guid>
      <description>As I promised in my article Developing a simple e-commerce application from scratch to production using SpringBoot , I am starting first post by introducing the application JCart that we are going to build.
One of my friend makes quilling toys and she sell them by advertising on Facebook or through word of mouth. Now she is getting more and more customers and she wants to expand her business by going online.</description>
    </item>
    
    <item>
      <title>Developing a simple e-commerce application from scratch to production using SpringBoot</title>
      <link>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</link>
      <pubDate>Fri, 20 Nov 2015 14:18:35 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/11/developing-a-simple-e-commerce-application-from-scratch-to-production-using-springboot/</guid>
      <description>We can find plenty of information on any technical topic, be it Java, .NET, Python or any frameworks like Spring, Hibernate, CDI, JSF etc. You can find hundreds of well written blogs on many of these topics. For example, you can find lot of tutorials on how to use SpringBoot or how to use various mappings in JPA/Hibernate or how to do form validations in JSF etc. Also, there are plenty of books published by well established publishers on most of the technologies.</description>
    </item>
    
    <item>
      <title>A Developers Perspective on Spring vs JavaEE</title>
      <link>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</link>
      <pubDate>Mon, 15 Jun 2015 13:04:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2015/06/a-developers-perspective-on-spring-vs-javaee/</guid>
      <description>In Java community Spring vs JavaEE is a never ending debate. In such debates people form two groups consisting of evangelists, architects and hard core fans of one platform and debate endlessly. Those who participate in the debates may be architects who are responsible for platform selection. But what would developers think about this Spring vs JavaEE debate?
I am a Java developer who uses both Spring and JavaEE and I am not part of Spring or JavaEE fan club.</description>
    </item>
    
    <item>
      <title>A bunch of Maven Archetypes for Spring based Projects</title>
      <link>https://sivalabs.github.io/2012/10/a-bunch-of-maven-archetypes-for-spring-based-projects/</link>
      <pubDate>Mon, 29 Oct 2012 12:18:00 +0000</pubDate>
      
      <guid>https://sivalabs.github.io/2012/10/a-bunch-of-maven-archetypes-for-spring-based-projects/</guid>
      <description>Maven is a good project management tool which&amp;nbsp;greatly&amp;nbsp;reduces the amount of time we spend on creating java projects with proper structure.&amp;nbsp;With so many&amp;nbsp;predefined&amp;nbsp;maven archetypes it is even easier to create projects by simply selecting the archetype based on the technologies we need and type(jar/war/ear) of project we want to create.
However sometimes those predefined archetypes structure may not suite well for our needs or we may need some more additions to the pre-configured dependencies/frameworks etc.</description>
    </item>
    
  </channel>
</rss>